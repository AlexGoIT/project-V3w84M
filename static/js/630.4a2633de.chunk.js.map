{"version":3,"file":"static/js/630.4a2633de.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.styled.js","helpers/schemas/authValidationSchema.js","components/AuthForm/CustomInput/CustomInput.styled.js","components/AuthForm/CustomInput/CustomInput.jsx","components/AuthForm/AuthForm.jsx","pages/SignIn/SignIn.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form } from 'formik';\nimport { Link } from 'react-router-dom';\n\nexport const AuthWrapper = styled.div`\n  width: 335px;\n\n  @media screen and (min-width: 768px) {\n    width: 496px;\n  }\n`;\n\nexport const AuthHeader = styled.h1`\n  color: #efede8;\n  font-size: 24px;\n  line-height: calc(28 / 24);\n  margin-bottom: 14px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 32px;\n    line-height: calc(44 / 32);\n    margin-bottom: 16px;\n  }\n`;\n\nexport const AuthParagraph = styled.p`\n  color: rgba(239, 237, 232, 0.3);\n  font-size: 14px;\n  line-height: calc(18 / 14);\n  margin-bottom: 28px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: calc(24 / 16);\n    margin-bottom: 32px;\n  }\n`;\n\nexport const AuthStyledForm = styled(Form)`\n  width: 335px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 32px;\n  margin-bottom: 12px;\n\n  @media screen and (min-width: 768px) {\n    width: 364px;\n    gap: 34px;\n  }\n`;\n\nexport const AuthInput = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  max-height: 46px;\n  padding: 14px;\n  background-color: transparent;\n  color: #efede8;\n  caret-color: #efede8;\n  font-size: 14px;\n  line-height: calc(18 / 14);\n  border-radius: 12px;\n  border: 1px solid rgba(239, 237, 232, 0.3);\n\n  @media screen and (min-width: 768px) {\n    max-height: 52px;\n    font-size: 16px;\n    line-height: calc(24 / 16);\n  }\n\n  &:focus-visible {\n    border-color: #e6533c;\n  }\n\n  &.validation-failed {\n    border-color: #d80027;\n  }\n\n  &.validation-success {\n    border-color: #3cbf61;\n  }\n\n  &::placeholder {\n    color: transparent;\n  }\n\n  &:-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px rgb(4, 4, 4) inset;\n    -webkit-text-fill-color: #efede8;\n    caret-color: #efede8;\n  }\n`;\n\nexport const AuthSubmitButton = styled.button`\n  box-sizing: border-box;\n  margin-top: 10px;\n  display: flex;\n  padding: 12px 40px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  color: #efede8;\n  font-family: inherit;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 18px;\n  border-radius: 12px;\n  background: #e6533c;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 40px;\n    padding: 16px 60px;\n    font-size: 20px;\n    line-height: calc(24 / 20);\n  }\n`;\n\nexport const AuthBottomText = styled.span`\n  color: rgba(239, 237, 232, 0.6);\n  font-feature-settings: 'clig' off, 'liga' off;\n  font-size: 12px;\n  line-height: calc(18 / 12);\n`;\n\nexport const AuthStyledLink = styled(Link)`\n  color: #efede8;\n  font-feature-settings: 'clig' off, 'liga' off;\n  font-size: 12px;\n  line-height: 18px;\n  text-decoration-line: underline;\n`;\n","import * as Yup from 'yup';\n\nexport const signUpSchema = Yup.object({\n  name: Yup.string().required('Please enter your name'),\n  email: Yup.string()\n    .matches(\n      /^[a-zA-Z0-9_.-]+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/,\n      \"Doesn't look like a valid email.\"\n    )\n    .required('Please enter your email address'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters long')\n    .required('Please enter your password'),\n});\n\nexport const signInSchema = Yup.object({\n  email: Yup.string()\n    .matches(\n      /^[a-zA-Z0-9_.-]+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/,\n      \"Doesn't look like a valid email.\"\n    )\n    .required('Please enter your email address'),\n  password: Yup.string()\n    .min(6, 'Password must be minimum 6 characters long')\n    .required('Please enter your password'),\n});\n","import styled from '@emotion/styled';\n\nexport const AuthInputWrapper = styled.div`\n  width: 100%;\n  position: relative;\n`;\n\nexport const AuthLabel = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 14px;\n  transform: translateY(-50%);\n  text-transform: capitalize;\n  color: rgba(239, 237, 232, 0.6);\n  font-size: 14px;\n  line-height: calc(18 / 14);\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: calc(24 / 16);\n  }\n\n  input:focus + &,\n  input:not(:placeholder-shown) + & {\n    top: -18px;\n    transform: translateY(0%);\n    left: 0px;\n    font-size: 12px;\n    line-height: 140%;\n\n    @media screen and (min-width: 768px) {\n      font-size: 14px;\n    }\n  }\n`;\n\nexport const AuthInput = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  max-height: 46px;\n  padding: 14px;\n  background-color: transparent;\n  color: #efede8;\n  caret-color: #efede8;\n  font-size: 14px;\n  line-height: calc(18 / 14);\n  border-radius: 12px;\n  border: 1px solid rgba(239, 237, 232, 0.3);\n\n  @media screen and (min-width: 768px) {\n    max-height: 52px;\n    font-size: 16px;\n    line-height: calc(24 / 16);\n  }\n\n  &:focus-visible {\n    border-color: #e6533c;\n  }\n\n  &.validation-failed {\n    border-color: #d80027;\n  }\n\n  &.validation-success {\n    border-color: #3cbf61;\n  }\n\n  &::placeholder {\n    color: transparent;\n  }\n\n  &:-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px rgb(4, 4, 4) inset;\n    -webkit-text-fill-color: #efede8;\n    caret-color: #efede8;\n  }\n`;\n\nexport const PasswordToggler = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 50%;\n  right: 14px;\n  transform: translateY(-50%);\n  background-color: transparent;\n  border: none;\n`;\n\nexport const PasswordTogglerIcon = styled.svg`\n  fill: #efede8;\n`;\n\nexport const AuthErrorMessage = styled.span`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  bottom: -18px;\n  left: 0px;\n  font-feature-settings: 'clig' off, 'liga' off;\n  font-size: 10px;\n  line-height: calc(15 / 10);\n  letter-spacing: 0.12px;\n  color: #d80027;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n    line-height: calc(18 / 12);\n  }\n`;\n\nexport const AuthSuccessIcon = styled.svg`\n  width: 12px;\n  height: 12px;\n\n  @media screen and (min-width: 768px) {\n    width: 14px;\n    height: 14px;\n  }\n`;\n\nexport const AuthErrorIcon = styled(AuthSuccessIcon)`\n  fill: #d80027;\n`;\n\nexport const AuthSuccessMessage = styled(AuthErrorMessage)`\n  color: #3cbf61;\n`;\n","import { useField } from 'formik';\nimport { useState } from 'react';\nimport {\n  AuthErrorIcon,\n  AuthErrorMessage,\n  AuthInput,\n  AuthInputWrapper,\n  AuthLabel,\n  AuthSuccessIcon,\n  AuthSuccessMessage,\n  PasswordToggler,\n  PasswordTogglerIcon,\n} from './CustomInput.styled';\nimport sprite from '../../../assets/images/sprite.svg';\n\nconst CustomInput = props => {\n  const [field, meta] = useField(props);\n  const [showPassword, setShowPassword] = useState(false);\n  const showError = meta.touched && meta.error;\n  const showSuccess = meta.touched && !meta.error;\n\n  const changeInputType = () => {\n    if (props.name === 'name' || (props.name === 'password' && showPassword))\n      return 'text';\n    else return props.name;\n  };\n\n  const validationStatus = () => {\n    if (showError) {\n      return 'validation-failed';\n    }\n    if (showSuccess) {\n      return 'validation-success';\n    }\n    return;\n  };\n\n  const successMessages = {\n    name: 'Nice to meet you!',\n    email: 'Your email looks good and is ready for action.',\n    password: 'Password is okay.',\n  };\n\n  return (\n    <AuthInputWrapper>\n      <AuthInput\n        type={changeInputType()}\n        {...field}\n        {...props}\n        className={validationStatus()}\n      />\n      <AuthLabel htmlFor={props.id || props.name}>{props.name}</AuthLabel>\n      {props.name === 'password' && (\n        <PasswordToggler\n          type=\"button\"\n          onClick={() => setShowPassword(prev => !prev)}\n        >\n          <PasswordTogglerIcon width=\"20\" height=\"20\">\n            <use href={`${sprite}#${showPassword ? 'eye-off' : 'eye'}`}></use>\n          </PasswordTogglerIcon>\n        </PasswordToggler>\n      )}\n\n      {showError && (\n        <AuthErrorMessage>\n          <AuthErrorIcon>\n            <use href={`${sprite}#error`}></use>\n          </AuthErrorIcon>\n          {meta.error}\n        </AuthErrorMessage>\n      )}\n      {showSuccess && (\n        <AuthSuccessMessage>\n          <AuthSuccessIcon>\n            <use href={`${sprite}#success`}></use>\n          </AuthSuccessIcon>\n          {successMessages[props.name]}\n        </AuthSuccessMessage>\n      )}\n    </AuthInputWrapper>\n  );\n};\n\nexport default CustomInput;\n","import { Formik } from 'formik';\nimport {\n  AuthBottomText,\n  AuthHeader,\n  AuthParagraph,\n  AuthStyledForm,\n  AuthStyledLink,\n  AuthSubmitButton,\n  AuthWrapper,\n} from './AuthForm.styled';\nimport { signInSchema, signUpSchema } from 'helpers/schemas';\nimport CustomInput from './CustomInput';\n\nconst AuthForm = ({ formType }) => {\n  let initialValues = { name: '', email: '', password: '' };\n  let headerText = 'Sign Up';\n  let paragraphText =\n    'Thank you for your interest in our platform. To complete the registration process, please provide us with the following information.';\n  let bottomText = (\n    <AuthBottomText>\n      Already have an account?{' '}\n      <AuthStyledLink to=\"/signin\">Sign In</AuthStyledLink>\n    </AuthBottomText>\n  );\n\n  if (formType === 'SignInForm') {\n    initialValues = { email: '', password: '' };\n    headerText = 'Sign In';\n    paragraphText =\n      'Welcome! Please enter your credentials to login to the platform:';\n    bottomText = (\n      <AuthBottomText>\n        Don’t have an account?{' '}\n        <AuthStyledLink to=\"/signup\">Sign Up</AuthStyledLink>\n      </AuthBottomText>\n    );\n  }\n\n  return (\n    <AuthWrapper>\n      <AuthHeader>{headerText}</AuthHeader>\n      <AuthParagraph>{paragraphText}</AuthParagraph>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={\n          formType === 'SignInForm' ? signInSchema : signUpSchema\n        }\n        onSubmit={(values, actions) => {\n          console.log(values);\n          actions.resetForm();\n        }}\n      >\n        {({ isValid, dirty, values }) => (\n          <AuthStyledForm>\n            {Object.keys(values).map(value => {\n              return (\n                <CustomInput\n                  key={value}\n                  name={value}\n                  id={value}\n                  required\n                  placeholder=\".\"\n                />\n              );\n            })}\n            <AuthSubmitButton type=\"submit\" disabled={!(isValid && dirty)}>\n              {headerText}\n            </AuthSubmitButton>\n          </AuthStyledForm>\n        )}\n      </Formik>\n      {bottomText}\n    </AuthWrapper>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from 'components/AuthForm/';\n\nconst SignIn = () => {\n  return (\n    <>\n      <AuthForm formType=\"SignInForm\" />\n    </>\n  );\n};\n\nexport default SignIn;\n"],"names":["AuthWrapper","styled","div","_templateObject","_taggedTemplateLiteral","AuthHeader","h1","_templateObject2","AuthParagraph","p","_templateObject3","AuthStyledForm","Form","_templateObject4","AuthSubmitButton","input","_templateObject5","button","_templateObject6","AuthBottomText","span","_templateObject7","AuthStyledLink","Link","_templateObject8","signUpSchema","Yup","name","required","email","matches","password","min","signInSchema","AuthInputWrapper","AuthLabel","label","AuthInput","PasswordToggler","PasswordTogglerIcon","svg","AuthErrorMessage","AuthSuccessIcon","AuthErrorIcon","AuthSuccessMessage","_templateObject9","props","_useField","useField","_useField2","_slicedToArray","field","meta","_useState","useState","_useState2","showPassword","setShowPassword","showError","touched","error","showSuccess","_jsxs","children","_jsx","_objectSpread","type","className","htmlFor","id","onClick","prev","width","height","href","concat","sprite","_ref","formType","initialValues","headerText","paragraphText","bottomText","to","Formik","validationSchema","onSubmit","values","actions","console","log","resetForm","_ref2","isValid","dirty","Object","keys","map","value","CustomInput","placeholder","disabled","_Fragment","AuthForm"],"sourceRoot":""}